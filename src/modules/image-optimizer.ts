import { logger } from '@/config';

/**
 * Image Optimizer Module
 * Handles lazy loading and responsive images.
 */
export class ImageOptimizer {
  constructor() {
    logger.log('ImageOptimizer initialized');
    this.init();
  }

  private init(): void {
    try {
      this.optimizeProjectThumbnails();
      this.optimizeAvatar();
      this.applyDefaultSizes();
      logger.log('üñºÔ∏è ImageOptimizer: responsive images applied');
    } catch (e) {
      logger.warn('ImageOptimizer: init failed', e as Error);
    }
  }

  private optimizeProjectThumbnails(): void {
    const imgs = Array.from(document.querySelectorAll<HTMLImageElement>('.project-img img'));
    imgs.forEach((img) => {
      const parentTag = img.parentElement?.tagName.toLowerCase() || '';
      if (parentTag === 'picture') return;

      const src = img.getAttribute('src') || '';
      const match = src.match(/^(.*\/images\/projects\/[^/]+\/)\s*([^/.]+)\.(jpg|jpeg|png)$/i);
      if (!match) return;

      const baseDir = match[1];
      const name = match[2];
      const widths = [400, 800, 1200];

      const avifSrcset = widths.map((w) => `${baseDir}${name}-${w}.avif ${w}w`).join(', ');
      const webpSrcset = widths.map((w) => `${baseDir}${name}-${w}.webp ${w}w`).join(', ');
      const sizes = '(max-width: 768px) 95vw, 400px';

      const picture = document.createElement('picture');
      const avifSource = document.createElement('source');
      avifSource.type = 'image/avif';
      avifSource.srcset = avifSrcset;
      avifSource.sizes = sizes;

      const webpSource = document.createElement('source');
      webpSource.type = 'image/webp';
      webpSource.srcset = webpSrcset;
      webpSource.sizes = sizes;

      // Ensure fallback image keeps attributes
      img.sizes = sizes;
      if (!img.hasAttribute('decoding')) img.setAttribute('decoding', 'async');
      if (!img.classList.contains('critical-image') && !img.hasAttribute('loading')) {
        img.setAttribute('loading', 'lazy');
      }

      picture.appendChild(avifSource);
      picture.appendChild(webpSource);
      picture.appendChild(img.cloneNode(true));

      // Replace the original image in DOM with picture
      const original = img;
      const parent = original.parentElement as HTMLElement | null;
      if (parent) {
        parent.replaceChild(picture, original);
      }
    });
  }

  private optimizeAvatar(): void {
    const avatarImgs = Array.from(document.querySelectorAll<HTMLImageElement>('img[src*="/images/my-avatar"], .avatar-box img'));
    avatarImgs.forEach((img) => {
      const parentTag = img.parentElement?.tagName.toLowerCase() || '';
      const sizes = '80px';

      // Build sources for AVIF/WEBP generated by convert-images script
      const avifSrcset = '/images/my-avatar.avif 80w, /images/my-avatar@2x.avif 160w';
      const webpSrcset = '/images/my-avatar.webp 80w, /images/my-avatar@2x.webp 160w';

      // If already inside a picture, only set sizes/srcset on <img>
      if (parentTag === 'picture') {
        img.sizes = sizes;
        return;
      }

      const picture = document.createElement('picture');
      const avifSource = document.createElement('source');
      avifSource.type = 'image/avif';
      avifSource.srcset = avifSrcset;
      avifSource.sizes = sizes;

      const webpSource = document.createElement('source');
      webpSource.type = 'image/webp';
      webpSource.srcset = webpSrcset;
      webpSource.sizes = sizes;

      img.sizes = sizes;
      if (!img.hasAttribute('decoding')) img.setAttribute('decoding', 'async');

      picture.appendChild(avifSource);
      picture.appendChild(webpSource);
      picture.appendChild(img.cloneNode(true));

      const original = img;
      const parent = original.parentElement as HTMLElement | null;
      if (parent) {
        parent.replaceChild(picture, original);
      }
    });
  }

  private applyDefaultSizes(): void {
    const images = Array.from(document.querySelectorAll<HTMLImageElement>('img'));
    images.forEach((img) => {
      if (!img.hasAttribute('sizes')) {
        const isProject = img.closest('.project-img') !== null;
        const defaultSizes = isProject
          ? '(max-width: 768px) 95vw, 400px'
          : '(max-width: 480px) 90vw, (max-width: 768px) 70vw, 50vw';
        img.setAttribute('sizes', defaultSizes);
      }
    });
  }
}
